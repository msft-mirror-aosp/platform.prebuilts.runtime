// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/system_info/cpu_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class CpuInfo;
struct CpuInfoDefaultTypeInternal;
extern CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
class CpuInfo_ArmCpuIdentifier;
struct CpuInfo_ArmCpuIdentifierDefaultTypeInternal;
extern CpuInfo_ArmCpuIdentifierDefaultTypeInternal _CpuInfo_ArmCpuIdentifier_default_instance_;
class CpuInfo_Cpu;
struct CpuInfo_CpuDefaultTypeInternal;
extern CpuInfo_CpuDefaultTypeInternal _CpuInfo_Cpu_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CpuInfo* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo>(Arena*);
template<> ::perfetto::protos::CpuInfo_ArmCpuIdentifier* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo_ArmCpuIdentifier>(Arena*);
template<> ::perfetto::protos::CpuInfo_Cpu* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo_Cpu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class CpuInfo_ArmCpuIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo.ArmCpuIdentifier) */ {
 public:
  inline CpuInfo_ArmCpuIdentifier() : CpuInfo_ArmCpuIdentifier(nullptr) {}
  ~CpuInfo_ArmCpuIdentifier() override;
  explicit PROTOBUF_CONSTEXPR CpuInfo_ArmCpuIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo_ArmCpuIdentifier(const CpuInfo_ArmCpuIdentifier& from);
  CpuInfo_ArmCpuIdentifier(CpuInfo_ArmCpuIdentifier&& from) noexcept
    : CpuInfo_ArmCpuIdentifier() {
    *this = ::std::move(from);
  }

  inline CpuInfo_ArmCpuIdentifier& operator=(const CpuInfo_ArmCpuIdentifier& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo_ArmCpuIdentifier& operator=(CpuInfo_ArmCpuIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CpuInfo_ArmCpuIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuInfo_ArmCpuIdentifier* internal_default_instance() {
    return reinterpret_cast<const CpuInfo_ArmCpuIdentifier*>(
               &_CpuInfo_ArmCpuIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuInfo_ArmCpuIdentifier& a, CpuInfo_ArmCpuIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo_ArmCpuIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo_ArmCpuIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo_ArmCpuIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo_ArmCpuIdentifier>(arena);
  }
  CpuInfo_ArmCpuIdentifier* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CpuInfo_ArmCpuIdentifier& from);
  void MergeFrom(const CpuInfo_ArmCpuIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuInfo_ArmCpuIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuInfo.ArmCpuIdentifier";
  }
  protected:
  explicit CpuInfo_ArmCpuIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImplementerFieldNumber = 1,
    kArchitectureFieldNumber = 2,
    kVariantFieldNumber = 3,
    kPartFieldNumber = 4,
    kRevisionFieldNumber = 5,
  };
  // optional uint32 implementer = 1;
  bool has_implementer() const;
  private:
  bool _internal_has_implementer() const;
  public:
  void clear_implementer();
  ::uint32_t implementer() const;
  void set_implementer(::uint32_t value);
  private:
  ::uint32_t _internal_implementer() const;
  void _internal_set_implementer(::uint32_t value);
  public:

  // optional uint32 architecture = 2;
  bool has_architecture() const;
  private:
  bool _internal_has_architecture() const;
  public:
  void clear_architecture();
  ::uint32_t architecture() const;
  void set_architecture(::uint32_t value);
  private:
  ::uint32_t _internal_architecture() const;
  void _internal_set_architecture(::uint32_t value);
  public:

  // optional uint32 variant = 3;
  bool has_variant() const;
  private:
  bool _internal_has_variant() const;
  public:
  void clear_variant();
  ::uint32_t variant() const;
  void set_variant(::uint32_t value);
  private:
  ::uint32_t _internal_variant() const;
  void _internal_set_variant(::uint32_t value);
  public:

  // optional uint32 part = 4;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  ::uint32_t part() const;
  void set_part(::uint32_t value);
  private:
  ::uint32_t _internal_part() const;
  void _internal_set_part(::uint32_t value);
  public:

  // optional uint32 revision = 5;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::uint32_t revision() const;
  void set_revision(::uint32_t value);
  private:
  ::uint32_t _internal_revision() const;
  void _internal_set_revision(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo.ArmCpuIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t implementer_;
    ::uint32_t architecture_;
    ::uint32_t variant_;
    ::uint32_t part_;
    ::uint32_t revision_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfo_Cpu final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo.Cpu) */ {
 public:
  inline CpuInfo_Cpu() : CpuInfo_Cpu(nullptr) {}
  ~CpuInfo_Cpu() override;
  explicit PROTOBUF_CONSTEXPR CpuInfo_Cpu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo_Cpu(const CpuInfo_Cpu& from);
  CpuInfo_Cpu(CpuInfo_Cpu&& from) noexcept
    : CpuInfo_Cpu() {
    *this = ::std::move(from);
  }

  inline CpuInfo_Cpu& operator=(const CpuInfo_Cpu& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo_Cpu& operator=(CpuInfo_Cpu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CpuInfo_Cpu& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kArmIdentifier = 4,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const CpuInfo_Cpu* internal_default_instance() {
    return reinterpret_cast<const CpuInfo_Cpu*>(
               &_CpuInfo_Cpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuInfo_Cpu& a, CpuInfo_Cpu& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo_Cpu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo_Cpu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo_Cpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo_Cpu>(arena);
  }
  CpuInfo_Cpu* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CpuInfo_Cpu& from);
  void MergeFrom(const CpuInfo_Cpu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuInfo_Cpu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuInfo.Cpu";
  }
  protected:
  explicit CpuInfo_Cpu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequenciesFieldNumber = 2,
    kProcessorFieldNumber = 1,
    kCapacityFieldNumber = 3,
    kArmIdentifierFieldNumber = 4,
  };
  // repeated uint32 frequencies = 2;
  int frequencies_size() const;
  private:
  int _internal_frequencies_size() const;
  public:
  void clear_frequencies();
  private:
  ::uint32_t _internal_frequencies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      _internal_frequencies() const;
  void _internal_add_frequencies(::uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      _internal_mutable_frequencies();
  public:
  ::uint32_t frequencies(int index) const;
  void set_frequencies(int index, ::uint32_t value);
  void add_frequencies(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
      frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
      mutable_frequencies();

  // optional string processor = 1;
  bool has_processor() const;
  private:
  bool _internal_has_processor() const;
  public:
  void clear_processor();
  const std::string& processor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_processor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_processor();
  PROTOBUF_NODISCARD std::string* release_processor();
  void set_allocated_processor(std::string* processor);
  private:
  const std::string& _internal_processor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processor(const std::string& value);
  std::string* _internal_mutable_processor();
  public:

  // optional uint32 capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  ::uint32_t capacity() const;
  void set_capacity(::uint32_t value);
  private:
  ::uint32_t _internal_capacity() const;
  void _internal_set_capacity(::uint32_t value);
  public:

  // .perfetto.protos.CpuInfo.ArmCpuIdentifier arm_identifier = 4;
  bool has_arm_identifier() const;
  private:
  bool _internal_has_arm_identifier() const;
  public:
  void clear_arm_identifier();
  const ::perfetto::protos::CpuInfo_ArmCpuIdentifier& arm_identifier() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuInfo_ArmCpuIdentifier* release_arm_identifier();
  ::perfetto::protos::CpuInfo_ArmCpuIdentifier* mutable_arm_identifier();
  void set_allocated_arm_identifier(::perfetto::protos::CpuInfo_ArmCpuIdentifier* arm_identifier);
  private:
  const ::perfetto::protos::CpuInfo_ArmCpuIdentifier& _internal_arm_identifier() const;
  ::perfetto::protos::CpuInfo_ArmCpuIdentifier* _internal_mutable_arm_identifier();
  public:
  void unsafe_arena_set_allocated_arm_identifier(
      ::perfetto::protos::CpuInfo_ArmCpuIdentifier* arm_identifier);
  ::perfetto::protos::CpuInfo_ArmCpuIdentifier* unsafe_arena_release_arm_identifier();

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo.Cpu)
 private:
  class _Internal;
  void set_has_arm_identifier();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t > frequencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_;
    ::uint32_t capacity_;
    union IdentifierUnion {
      constexpr IdentifierUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::CpuInfo_ArmCpuIdentifier* arm_identifier_;
    } identifier_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo) */ {
 public:
  inline CpuInfo() : CpuInfo(nullptr) {}
  ~CpuInfo() override;
  explicit PROTOBUF_CONSTEXPR CpuInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo(const CpuInfo& from);
  CpuInfo(CpuInfo&& from) noexcept
    : CpuInfo() {
    *this = ::std::move(from);
  }

  inline CpuInfo& operator=(const CpuInfo& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo& operator=(CpuInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CpuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuInfo* internal_default_instance() {
    return reinterpret_cast<const CpuInfo*>(
               &_CpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuInfo& a, CpuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo>(arena);
  }
  CpuInfo* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CpuInfo& from);
  void MergeFrom(const CpuInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuInfo";
  }
  protected:
  explicit CpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CpuInfo_ArmCpuIdentifier ArmCpuIdentifier;
  typedef CpuInfo_Cpu Cpu;

  // accessors -------------------------------------------------------

  enum : int {
    kCpusFieldNumber = 1,
  };
  // repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
  int cpus_size() const;
  private:
  int _internal_cpus_size() const;
  public:
  void clear_cpus();
  ::perfetto::protos::CpuInfo_Cpu* mutable_cpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
      mutable_cpus();
  private:
  const ::perfetto::protos::CpuInfo_Cpu& _internal_cpus(int index) const;
  ::perfetto::protos::CpuInfo_Cpu* _internal_add_cpus();
  public:
  const ::perfetto::protos::CpuInfo_Cpu& cpus(int index) const;
  ::perfetto::protos::CpuInfo_Cpu* add_cpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
      cpus() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu > cpus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuInfo_ArmCpuIdentifier

// optional uint32 implementer = 1;
inline bool CpuInfo_ArmCpuIdentifier::_internal_has_implementer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CpuInfo_ArmCpuIdentifier::has_implementer() const {
  return _internal_has_implementer();
}
inline void CpuInfo_ArmCpuIdentifier::clear_implementer() {
  _impl_.implementer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::_internal_implementer() const {
  return _impl_.implementer_;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::implementer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.ArmCpuIdentifier.implementer)
  return _internal_implementer();
}
inline void CpuInfo_ArmCpuIdentifier::_internal_set_implementer(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.implementer_ = value;
}
inline void CpuInfo_ArmCpuIdentifier::set_implementer(::uint32_t value) {
  _internal_set_implementer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.ArmCpuIdentifier.implementer)
}

// optional uint32 architecture = 2;
inline bool CpuInfo_ArmCpuIdentifier::_internal_has_architecture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CpuInfo_ArmCpuIdentifier::has_architecture() const {
  return _internal_has_architecture();
}
inline void CpuInfo_ArmCpuIdentifier::clear_architecture() {
  _impl_.architecture_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::_internal_architecture() const {
  return _impl_.architecture_;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::architecture() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.ArmCpuIdentifier.architecture)
  return _internal_architecture();
}
inline void CpuInfo_ArmCpuIdentifier::_internal_set_architecture(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.architecture_ = value;
}
inline void CpuInfo_ArmCpuIdentifier::set_architecture(::uint32_t value) {
  _internal_set_architecture(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.ArmCpuIdentifier.architecture)
}

// optional uint32 variant = 3;
inline bool CpuInfo_ArmCpuIdentifier::_internal_has_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CpuInfo_ArmCpuIdentifier::has_variant() const {
  return _internal_has_variant();
}
inline void CpuInfo_ArmCpuIdentifier::clear_variant() {
  _impl_.variant_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::_internal_variant() const {
  return _impl_.variant_;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::variant() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.ArmCpuIdentifier.variant)
  return _internal_variant();
}
inline void CpuInfo_ArmCpuIdentifier::_internal_set_variant(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.variant_ = value;
}
inline void CpuInfo_ArmCpuIdentifier::set_variant(::uint32_t value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.ArmCpuIdentifier.variant)
}

// optional uint32 part = 4;
inline bool CpuInfo_ArmCpuIdentifier::_internal_has_part() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CpuInfo_ArmCpuIdentifier::has_part() const {
  return _internal_has_part();
}
inline void CpuInfo_ArmCpuIdentifier::clear_part() {
  _impl_.part_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::_internal_part() const {
  return _impl_.part_;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::part() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.ArmCpuIdentifier.part)
  return _internal_part();
}
inline void CpuInfo_ArmCpuIdentifier::_internal_set_part(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.part_ = value;
}
inline void CpuInfo_ArmCpuIdentifier::set_part(::uint32_t value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.ArmCpuIdentifier.part)
}

// optional uint32 revision = 5;
inline bool CpuInfo_ArmCpuIdentifier::_internal_has_revision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CpuInfo_ArmCpuIdentifier::has_revision() const {
  return _internal_has_revision();
}
inline void CpuInfo_ArmCpuIdentifier::clear_revision() {
  _impl_.revision_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::_internal_revision() const {
  return _impl_.revision_;
}
inline ::uint32_t CpuInfo_ArmCpuIdentifier::revision() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.ArmCpuIdentifier.revision)
  return _internal_revision();
}
inline void CpuInfo_ArmCpuIdentifier::_internal_set_revision(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.revision_ = value;
}
inline void CpuInfo_ArmCpuIdentifier::set_revision(::uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.ArmCpuIdentifier.revision)
}

// -------------------------------------------------------------------

// CpuInfo_Cpu

// optional string processor = 1;
inline bool CpuInfo_Cpu::_internal_has_processor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CpuInfo_Cpu::has_processor() const {
  return _internal_has_processor();
}
inline void CpuInfo_Cpu::clear_processor() {
  _impl_.processor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpuInfo_Cpu::processor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.processor)
  return _internal_processor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CpuInfo_Cpu::set_processor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.processor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.processor)
}
inline std::string* CpuInfo_Cpu::mutable_processor() {
  std::string* _s = _internal_mutable_processor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.Cpu.processor)
  return _s;
}
inline const std::string& CpuInfo_Cpu::_internal_processor() const {
  return _impl_.processor_.Get();
}
inline void CpuInfo_Cpu::_internal_set_processor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.processor_.Set(value, GetArenaForAllocation());
}
inline std::string* CpuInfo_Cpu::_internal_mutable_processor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.processor_.Mutable(GetArenaForAllocation());
}
inline std::string* CpuInfo_Cpu::release_processor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CpuInfo.Cpu.processor)
  if (!_internal_has_processor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.processor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.processor_.IsDefault()) {
    _impl_.processor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CpuInfo_Cpu::set_allocated_processor(std::string* processor) {
  if (processor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.processor_.SetAllocated(processor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.processor_.IsDefault()) {
    _impl_.processor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CpuInfo.Cpu.processor)
}

// repeated uint32 frequencies = 2;
inline int CpuInfo_Cpu::_internal_frequencies_size() const {
  return _impl_.frequencies_.size();
}
inline int CpuInfo_Cpu::frequencies_size() const {
  return _internal_frequencies_size();
}
inline void CpuInfo_Cpu::clear_frequencies() {
  _impl_.frequencies_.Clear();
}
inline ::uint32_t CpuInfo_Cpu::_internal_frequencies(int index) const {
  return _impl_.frequencies_.Get(index);
}
inline ::uint32_t CpuInfo_Cpu::frequencies(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_frequencies(index);
}
inline void CpuInfo_Cpu::set_frequencies(int index, ::uint32_t value) {
  _impl_.frequencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline void CpuInfo_Cpu::_internal_add_frequencies(::uint32_t value) {
  _impl_.frequencies_.Add(value);
}
inline void CpuInfo_Cpu::add_frequencies(::uint32_t value) {
  _internal_add_frequencies(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
CpuInfo_Cpu::_internal_frequencies() const {
  return _impl_.frequencies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >&
CpuInfo_Cpu::frequencies() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_frequencies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
CpuInfo_Cpu::_internal_mutable_frequencies() {
  return &_impl_.frequencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::uint32_t >*
CpuInfo_Cpu::mutable_frequencies() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_mutable_frequencies();
}

// optional uint32 capacity = 3;
inline bool CpuInfo_Cpu::_internal_has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CpuInfo_Cpu::has_capacity() const {
  return _internal_has_capacity();
}
inline void CpuInfo_Cpu::clear_capacity() {
  _impl_.capacity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuInfo_Cpu::_internal_capacity() const {
  return _impl_.capacity_;
}
inline ::uint32_t CpuInfo_Cpu::capacity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.capacity)
  return _internal_capacity();
}
inline void CpuInfo_Cpu::_internal_set_capacity(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.capacity_ = value;
}
inline void CpuInfo_Cpu::set_capacity(::uint32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.capacity)
}

// .perfetto.protos.CpuInfo.ArmCpuIdentifier arm_identifier = 4;
inline bool CpuInfo_Cpu::_internal_has_arm_identifier() const {
  return identifier_case() == kArmIdentifier;
}
inline bool CpuInfo_Cpu::has_arm_identifier() const {
  return _internal_has_arm_identifier();
}
inline void CpuInfo_Cpu::set_has_arm_identifier() {
  _impl_._oneof_case_[0] = kArmIdentifier;
}
inline void CpuInfo_Cpu::clear_arm_identifier() {
  if (_internal_has_arm_identifier()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.identifier_.arm_identifier_;
    }
    clear_has_identifier();
  }
}
inline ::perfetto::protos::CpuInfo_ArmCpuIdentifier* CpuInfo_Cpu::release_arm_identifier() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CpuInfo.Cpu.arm_identifier)
  if (_internal_has_arm_identifier()) {
    clear_has_identifier();
    ::perfetto::protos::CpuInfo_ArmCpuIdentifier* temp = _impl_.identifier_.arm_identifier_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.identifier_.arm_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuInfo_ArmCpuIdentifier& CpuInfo_Cpu::_internal_arm_identifier() const {
  return _internal_has_arm_identifier()
      ? *_impl_.identifier_.arm_identifier_
      : reinterpret_cast< ::perfetto::protos::CpuInfo_ArmCpuIdentifier&>(::perfetto::protos::_CpuInfo_ArmCpuIdentifier_default_instance_);
}
inline const ::perfetto::protos::CpuInfo_ArmCpuIdentifier& CpuInfo_Cpu::arm_identifier() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.arm_identifier)
  return _internal_arm_identifier();
}
inline ::perfetto::protos::CpuInfo_ArmCpuIdentifier* CpuInfo_Cpu::unsafe_arena_release_arm_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.CpuInfo.Cpu.arm_identifier)
  if (_internal_has_arm_identifier()) {
    clear_has_identifier();
    ::perfetto::protos::CpuInfo_ArmCpuIdentifier* temp = _impl_.identifier_.arm_identifier_;
    _impl_.identifier_.arm_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CpuInfo_Cpu::unsafe_arena_set_allocated_arm_identifier(::perfetto::protos::CpuInfo_ArmCpuIdentifier* arm_identifier) {
  clear_identifier();
  if (arm_identifier) {
    set_has_arm_identifier();
    _impl_.identifier_.arm_identifier_ = arm_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.CpuInfo.Cpu.arm_identifier)
}
inline ::perfetto::protos::CpuInfo_ArmCpuIdentifier* CpuInfo_Cpu::_internal_mutable_arm_identifier() {
  if (!_internal_has_arm_identifier()) {
    clear_identifier();
    set_has_arm_identifier();
    _impl_.identifier_.arm_identifier_ = CreateMaybeMessage< ::perfetto::protos::CpuInfo_ArmCpuIdentifier >(GetArenaForAllocation());
  }
  return _impl_.identifier_.arm_identifier_;
}
inline ::perfetto::protos::CpuInfo_ArmCpuIdentifier* CpuInfo_Cpu::mutable_arm_identifier() {
  ::perfetto::protos::CpuInfo_ArmCpuIdentifier* _msg = _internal_mutable_arm_identifier();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.Cpu.arm_identifier)
  return _msg;
}

inline bool CpuInfo_Cpu::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void CpuInfo_Cpu::clear_has_identifier() {
  _impl_._oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline CpuInfo_Cpu::IdentifierCase CpuInfo_Cpu::identifier_case() const {
  return CpuInfo_Cpu::IdentifierCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CpuInfo

// repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
inline int CpuInfo::_internal_cpus_size() const {
  return _impl_.cpus_.size();
}
inline int CpuInfo::cpus_size() const {
  return _internal_cpus_size();
}
inline void CpuInfo::clear_cpus() {
  _impl_.cpus_.Clear();
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.cpus)
  return _impl_.cpus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
CpuInfo::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.cpus)
  return &_impl_.cpus_;
}
inline const ::perfetto::protos::CpuInfo_Cpu& CpuInfo::_internal_cpus(int index) const {
  return _impl_.cpus_.Get(index);
}
inline const ::perfetto::protos::CpuInfo_Cpu& CpuInfo::cpus(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.cpus)
  return _internal_cpus(index);
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::_internal_add_cpus() {
  return _impl_.cpus_.Add();
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::add_cpus() {
  ::perfetto::protos::CpuInfo_Cpu* _add = _internal_add_cpus();
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.cpus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
CpuInfo::cpus() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.cpus)
  return _impl_.cpus_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
