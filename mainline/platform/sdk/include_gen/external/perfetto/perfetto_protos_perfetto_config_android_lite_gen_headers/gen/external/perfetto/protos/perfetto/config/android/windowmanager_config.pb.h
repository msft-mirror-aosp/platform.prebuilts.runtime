// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/windowmanager_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class WindowManagerConfig;
struct WindowManagerConfigDefaultTypeInternal;
extern WindowManagerConfigDefaultTypeInternal _WindowManagerConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::WindowManagerConfig* Arena::CreateMaybeMessage<::perfetto::protos::WindowManagerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum WindowManagerConfig_LogFrequency : int {
  WindowManagerConfig_LogFrequency_LOG_FREQUENCY_UNSPECIFIED = 0,
  WindowManagerConfig_LogFrequency_LOG_FREQUENCY_FRAME = 1,
  WindowManagerConfig_LogFrequency_LOG_FREQUENCY_TRANSACTION = 2,
  WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP = 3
};
bool WindowManagerConfig_LogFrequency_IsValid(int value);
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig_LogFrequency_LogFrequency_MIN = WindowManagerConfig_LogFrequency_LOG_FREQUENCY_UNSPECIFIED;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig_LogFrequency_LogFrequency_MAX = WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP;
constexpr int WindowManagerConfig_LogFrequency_LogFrequency_ARRAYSIZE = WindowManagerConfig_LogFrequency_LogFrequency_MAX + 1;

const std::string& WindowManagerConfig_LogFrequency_Name(WindowManagerConfig_LogFrequency value);
template<typename T>
inline const std::string& WindowManagerConfig_LogFrequency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowManagerConfig_LogFrequency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowManagerConfig_LogFrequency_Name.");
  return WindowManagerConfig_LogFrequency_Name(static_cast<WindowManagerConfig_LogFrequency>(enum_t_value));
}
bool WindowManagerConfig_LogFrequency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindowManagerConfig_LogFrequency* value);
enum WindowManagerConfig_LogLevel : int {
  WindowManagerConfig_LogLevel_LOG_LEVEL_UNSPECIFIED = 0,
  WindowManagerConfig_LogLevel_LOG_LEVEL_VERBOSE = 1,
  WindowManagerConfig_LogLevel_LOG_LEVEL_DEBUG = 2,
  WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL = 3
};
bool WindowManagerConfig_LogLevel_IsValid(int value);
constexpr WindowManagerConfig_LogLevel WindowManagerConfig_LogLevel_LogLevel_MIN = WindowManagerConfig_LogLevel_LOG_LEVEL_UNSPECIFIED;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig_LogLevel_LogLevel_MAX = WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL;
constexpr int WindowManagerConfig_LogLevel_LogLevel_ARRAYSIZE = WindowManagerConfig_LogLevel_LogLevel_MAX + 1;

const std::string& WindowManagerConfig_LogLevel_Name(WindowManagerConfig_LogLevel value);
template<typename T>
inline const std::string& WindowManagerConfig_LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowManagerConfig_LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowManagerConfig_LogLevel_Name.");
  return WindowManagerConfig_LogLevel_Name(static_cast<WindowManagerConfig_LogLevel>(enum_t_value));
}
bool WindowManagerConfig_LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindowManagerConfig_LogLevel* value);
// ===================================================================

class WindowManagerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.WindowManagerConfig) */ {
 public:
  inline WindowManagerConfig() : WindowManagerConfig(nullptr) {}
  ~WindowManagerConfig() override;
  explicit PROTOBUF_CONSTEXPR WindowManagerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowManagerConfig(const WindowManagerConfig& from);
  WindowManagerConfig(WindowManagerConfig&& from) noexcept
    : WindowManagerConfig() {
    *this = ::std::move(from);
  }

  inline WindowManagerConfig& operator=(const WindowManagerConfig& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline WindowManagerConfig& operator=(WindowManagerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WindowManagerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowManagerConfig* internal_default_instance() {
    return reinterpret_cast<const WindowManagerConfig*>(
               &_WindowManagerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WindowManagerConfig& a, WindowManagerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowManagerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowManagerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowManagerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowManagerConfig>(arena);
  }
  WindowManagerConfig* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WindowManagerConfig& from);
  void MergeFrom(const WindowManagerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowManagerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.WindowManagerConfig";
  }
  protected:
  explicit WindowManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WindowManagerConfig_LogFrequency LogFrequency;
  static constexpr LogFrequency LOG_FREQUENCY_UNSPECIFIED =
    WindowManagerConfig_LogFrequency_LOG_FREQUENCY_UNSPECIFIED;
  static constexpr LogFrequency LOG_FREQUENCY_FRAME =
    WindowManagerConfig_LogFrequency_LOG_FREQUENCY_FRAME;
  static constexpr LogFrequency LOG_FREQUENCY_TRANSACTION =
    WindowManagerConfig_LogFrequency_LOG_FREQUENCY_TRANSACTION;
  static constexpr LogFrequency LOG_FREQUENCY_SINGLE_DUMP =
    WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP;
  static inline bool LogFrequency_IsValid(int value) {
    return WindowManagerConfig_LogFrequency_IsValid(value);
  }
  static constexpr LogFrequency LogFrequency_MIN =
    WindowManagerConfig_LogFrequency_LogFrequency_MIN;
  static constexpr LogFrequency LogFrequency_MAX =
    WindowManagerConfig_LogFrequency_LogFrequency_MAX;
  static constexpr int LogFrequency_ARRAYSIZE =
    WindowManagerConfig_LogFrequency_LogFrequency_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LogFrequency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogFrequency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogFrequency_Name.");
    return WindowManagerConfig_LogFrequency_Name(enum_t_value);
  }
  static inline bool LogFrequency_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogFrequency* value) {
    return WindowManagerConfig_LogFrequency_Parse(name, value);
  }

  typedef WindowManagerConfig_LogLevel LogLevel;
  static constexpr LogLevel LOG_LEVEL_UNSPECIFIED =
    WindowManagerConfig_LogLevel_LOG_LEVEL_UNSPECIFIED;
  static constexpr LogLevel LOG_LEVEL_VERBOSE =
    WindowManagerConfig_LogLevel_LOG_LEVEL_VERBOSE;
  static constexpr LogLevel LOG_LEVEL_DEBUG =
    WindowManagerConfig_LogLevel_LOG_LEVEL_DEBUG;
  static constexpr LogLevel LOG_LEVEL_CRITICAL =
    WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL;
  static inline bool LogLevel_IsValid(int value) {
    return WindowManagerConfig_LogLevel_IsValid(value);
  }
  static constexpr LogLevel LogLevel_MIN =
    WindowManagerConfig_LogLevel_LogLevel_MIN;
  static constexpr LogLevel LogLevel_MAX =
    WindowManagerConfig_LogLevel_LogLevel_MAX;
  static constexpr int LogLevel_ARRAYSIZE =
    WindowManagerConfig_LogLevel_LogLevel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LogLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
    return WindowManagerConfig_LogLevel_Name(enum_t_value);
  }
  static inline bool LogLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogLevel* value) {
    return WindowManagerConfig_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLogFrequencyFieldNumber = 1,
    kLogLevelFieldNumber = 2,
  };
  // optional .perfetto.protos.WindowManagerConfig.LogFrequency log_frequency = 1;
  bool has_log_frequency() const;
  private:
  bool _internal_has_log_frequency() const;
  public:
  void clear_log_frequency();
  ::perfetto::protos::WindowManagerConfig_LogFrequency log_frequency() const;
  void set_log_frequency(::perfetto::protos::WindowManagerConfig_LogFrequency value);
  private:
  ::perfetto::protos::WindowManagerConfig_LogFrequency _internal_log_frequency() const;
  void _internal_set_log_frequency(::perfetto::protos::WindowManagerConfig_LogFrequency value);
  public:

  // optional .perfetto.protos.WindowManagerConfig.LogLevel log_level = 2;
  bool has_log_level() const;
  private:
  bool _internal_has_log_level() const;
  public:
  void clear_log_level();
  ::perfetto::protos::WindowManagerConfig_LogLevel log_level() const;
  void set_log_level(::perfetto::protos::WindowManagerConfig_LogLevel value);
  private:
  ::perfetto::protos::WindowManagerConfig_LogLevel _internal_log_level() const;
  void _internal_set_log_level(::perfetto::protos::WindowManagerConfig_LogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.WindowManagerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int log_frequency_;
    int log_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WindowManagerConfig

// optional .perfetto.protos.WindowManagerConfig.LogFrequency log_frequency = 1;
inline bool WindowManagerConfig::_internal_has_log_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowManagerConfig::has_log_frequency() const {
  return _internal_has_log_frequency();
}
inline void WindowManagerConfig::clear_log_frequency() {
  _impl_.log_frequency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::WindowManagerConfig_LogFrequency WindowManagerConfig::_internal_log_frequency() const {
  return static_cast< ::perfetto::protos::WindowManagerConfig_LogFrequency >(_impl_.log_frequency_);
}
inline ::perfetto::protos::WindowManagerConfig_LogFrequency WindowManagerConfig::log_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WindowManagerConfig.log_frequency)
  return _internal_log_frequency();
}
inline void WindowManagerConfig::_internal_set_log_frequency(::perfetto::protos::WindowManagerConfig_LogFrequency value) {
  assert(::perfetto::protos::WindowManagerConfig_LogFrequency_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.log_frequency_ = value;
}
inline void WindowManagerConfig::set_log_frequency(::perfetto::protos::WindowManagerConfig_LogFrequency value) {
  _internal_set_log_frequency(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.WindowManagerConfig.log_frequency)
}

// optional .perfetto.protos.WindowManagerConfig.LogLevel log_level = 2;
inline bool WindowManagerConfig::_internal_has_log_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowManagerConfig::has_log_level() const {
  return _internal_has_log_level();
}
inline void WindowManagerConfig::clear_log_level() {
  _impl_.log_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::WindowManagerConfig_LogLevel WindowManagerConfig::_internal_log_level() const {
  return static_cast< ::perfetto::protos::WindowManagerConfig_LogLevel >(_impl_.log_level_);
}
inline ::perfetto::protos::WindowManagerConfig_LogLevel WindowManagerConfig::log_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WindowManagerConfig.log_level)
  return _internal_log_level();
}
inline void WindowManagerConfig::_internal_set_log_level(::perfetto::protos::WindowManagerConfig_LogLevel value) {
  assert(::perfetto::protos::WindowManagerConfig_LogLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_level_ = value;
}
inline void WindowManagerConfig::set_log_level(::perfetto::protos::WindowManagerConfig_LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.WindowManagerConfig.log_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::WindowManagerConfig_LogFrequency> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::WindowManagerConfig_LogLevel> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fwindowmanager_5fconfig_2eproto
