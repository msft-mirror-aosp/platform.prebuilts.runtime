// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/pixel_mm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto {
  static const ::uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class PixelMmKswapdDoneFtraceEvent;
struct PixelMmKswapdDoneFtraceEventDefaultTypeInternal;
extern PixelMmKswapdDoneFtraceEventDefaultTypeInternal _PixelMmKswapdDoneFtraceEvent_default_instance_;
class PixelMmKswapdWakeFtraceEvent;
struct PixelMmKswapdWakeFtraceEventDefaultTypeInternal;
extern PixelMmKswapdWakeFtraceEventDefaultTypeInternal _PixelMmKswapdWakeFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PixelMmKswapdDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::PixelMmKswapdDoneFtraceEvent>(Arena*);
template<> ::perfetto::protos::PixelMmKswapdWakeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::PixelMmKswapdWakeFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class PixelMmKswapdWakeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PixelMmKswapdWakeFtraceEvent) */ {
 public:
  inline PixelMmKswapdWakeFtraceEvent() : PixelMmKswapdWakeFtraceEvent(nullptr) {}
  ~PixelMmKswapdWakeFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR PixelMmKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelMmKswapdWakeFtraceEvent(const PixelMmKswapdWakeFtraceEvent& from);
  PixelMmKswapdWakeFtraceEvent(PixelMmKswapdWakeFtraceEvent&& from) noexcept
    : PixelMmKswapdWakeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline PixelMmKswapdWakeFtraceEvent& operator=(const PixelMmKswapdWakeFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline PixelMmKswapdWakeFtraceEvent& operator=(PixelMmKswapdWakeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PixelMmKswapdWakeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelMmKswapdWakeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const PixelMmKswapdWakeFtraceEvent*>(
               &_PixelMmKswapdWakeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PixelMmKswapdWakeFtraceEvent& a, PixelMmKswapdWakeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelMmKswapdWakeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelMmKswapdWakeFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelMmKswapdWakeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PixelMmKswapdWakeFtraceEvent>(arena);
  }
  PixelMmKswapdWakeFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PixelMmKswapdWakeFtraceEvent& from);
  void MergeFrom(const PixelMmKswapdWakeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PixelMmKswapdWakeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PixelMmKswapdWakeFtraceEvent";
  }
  protected:
  explicit PixelMmKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhateverFieldNumber = 1,
  };
  // optional int32 whatever = 1;
  bool has_whatever() const;
  private:
  bool _internal_has_whatever() const;
  public:
  void clear_whatever();
  ::int32_t whatever() const;
  void set_whatever(::int32_t value);
  private:
  ::int32_t _internal_whatever() const;
  void _internal_set_whatever(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.PixelMmKswapdWakeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t whatever_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto;
};
// -------------------------------------------------------------------

class PixelMmKswapdDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PixelMmKswapdDoneFtraceEvent) */ {
 public:
  inline PixelMmKswapdDoneFtraceEvent() : PixelMmKswapdDoneFtraceEvent(nullptr) {}
  ~PixelMmKswapdDoneFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR PixelMmKswapdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelMmKswapdDoneFtraceEvent(const PixelMmKswapdDoneFtraceEvent& from);
  PixelMmKswapdDoneFtraceEvent(PixelMmKswapdDoneFtraceEvent&& from) noexcept
    : PixelMmKswapdDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline PixelMmKswapdDoneFtraceEvent& operator=(const PixelMmKswapdDoneFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline PixelMmKswapdDoneFtraceEvent& operator=(PixelMmKswapdDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PixelMmKswapdDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelMmKswapdDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const PixelMmKswapdDoneFtraceEvent*>(
               &_PixelMmKswapdDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PixelMmKswapdDoneFtraceEvent& a, PixelMmKswapdDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelMmKswapdDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelMmKswapdDoneFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelMmKswapdDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PixelMmKswapdDoneFtraceEvent>(arena);
  }
  PixelMmKswapdDoneFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PixelMmKswapdDoneFtraceEvent& from);
  void MergeFrom(const PixelMmKswapdDoneFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PixelMmKswapdDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PixelMmKswapdDoneFtraceEvent";
  }
  protected:
  explicit PixelMmKswapdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaNrScannedFieldNumber = 1,
    kDeltaNrReclaimedFieldNumber = 2,
  };
  // optional uint64 delta_nr_scanned = 1;
  bool has_delta_nr_scanned() const;
  private:
  bool _internal_has_delta_nr_scanned() const;
  public:
  void clear_delta_nr_scanned();
  ::uint64_t delta_nr_scanned() const;
  void set_delta_nr_scanned(::uint64_t value);
  private:
  ::uint64_t _internal_delta_nr_scanned() const;
  void _internal_set_delta_nr_scanned(::uint64_t value);
  public:

  // optional uint64 delta_nr_reclaimed = 2;
  bool has_delta_nr_reclaimed() const;
  private:
  bool _internal_has_delta_nr_reclaimed() const;
  public:
  void clear_delta_nr_reclaimed();
  ::uint64_t delta_nr_reclaimed() const;
  void set_delta_nr_reclaimed(::uint64_t value);
  private:
  ::uint64_t _internal_delta_nr_reclaimed() const;
  void _internal_set_delta_nr_reclaimed(::uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.PixelMmKswapdDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t delta_nr_scanned_;
    ::uint64_t delta_nr_reclaimed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PixelMmKswapdWakeFtraceEvent

// optional int32 whatever = 1;
inline bool PixelMmKswapdWakeFtraceEvent::_internal_has_whatever() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PixelMmKswapdWakeFtraceEvent::has_whatever() const {
  return _internal_has_whatever();
}
inline void PixelMmKswapdWakeFtraceEvent::clear_whatever() {
  _impl_.whatever_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PixelMmKswapdWakeFtraceEvent::_internal_whatever() const {
  return _impl_.whatever_;
}
inline ::int32_t PixelMmKswapdWakeFtraceEvent::whatever() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelMmKswapdWakeFtraceEvent.whatever)
  return _internal_whatever();
}
inline void PixelMmKswapdWakeFtraceEvent::_internal_set_whatever(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.whatever_ = value;
}
inline void PixelMmKswapdWakeFtraceEvent::set_whatever(::int32_t value) {
  _internal_set_whatever(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelMmKswapdWakeFtraceEvent.whatever)
}

// -------------------------------------------------------------------

// PixelMmKswapdDoneFtraceEvent

// optional uint64 delta_nr_scanned = 1;
inline bool PixelMmKswapdDoneFtraceEvent::_internal_has_delta_nr_scanned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PixelMmKswapdDoneFtraceEvent::has_delta_nr_scanned() const {
  return _internal_has_delta_nr_scanned();
}
inline void PixelMmKswapdDoneFtraceEvent::clear_delta_nr_scanned() {
  _impl_.delta_nr_scanned_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t PixelMmKswapdDoneFtraceEvent::_internal_delta_nr_scanned() const {
  return _impl_.delta_nr_scanned_;
}
inline ::uint64_t PixelMmKswapdDoneFtraceEvent::delta_nr_scanned() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelMmKswapdDoneFtraceEvent.delta_nr_scanned)
  return _internal_delta_nr_scanned();
}
inline void PixelMmKswapdDoneFtraceEvent::_internal_set_delta_nr_scanned(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_nr_scanned_ = value;
}
inline void PixelMmKswapdDoneFtraceEvent::set_delta_nr_scanned(::uint64_t value) {
  _internal_set_delta_nr_scanned(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelMmKswapdDoneFtraceEvent.delta_nr_scanned)
}

// optional uint64 delta_nr_reclaimed = 2;
inline bool PixelMmKswapdDoneFtraceEvent::_internal_has_delta_nr_reclaimed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PixelMmKswapdDoneFtraceEvent::has_delta_nr_reclaimed() const {
  return _internal_has_delta_nr_reclaimed();
}
inline void PixelMmKswapdDoneFtraceEvent::clear_delta_nr_reclaimed() {
  _impl_.delta_nr_reclaimed_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t PixelMmKswapdDoneFtraceEvent::_internal_delta_nr_reclaimed() const {
  return _impl_.delta_nr_reclaimed_;
}
inline ::uint64_t PixelMmKswapdDoneFtraceEvent::delta_nr_reclaimed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelMmKswapdDoneFtraceEvent.delta_nr_reclaimed)
  return _internal_delta_nr_reclaimed();
}
inline void PixelMmKswapdDoneFtraceEvent::_internal_set_delta_nr_reclaimed(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_nr_reclaimed_ = value;
}
inline void PixelMmKswapdDoneFtraceEvent::set_delta_nr_reclaimed(::uint64_t value) {
  _internal_set_delta_nr_reclaimed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelMmKswapdDoneFtraceEvent.delta_nr_reclaimed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpixel_5fmm_2eproto
