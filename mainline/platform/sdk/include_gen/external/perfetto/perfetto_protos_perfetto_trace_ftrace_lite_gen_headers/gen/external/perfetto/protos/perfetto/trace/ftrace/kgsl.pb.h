// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/kgsl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto {
  static const ::uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class KgslAdrenoCmdbatchQueuedFtraceEvent;
struct KgslAdrenoCmdbatchQueuedFtraceEventDefaultTypeInternal;
extern KgslAdrenoCmdbatchQueuedFtraceEventDefaultTypeInternal _KgslAdrenoCmdbatchQueuedFtraceEvent_default_instance_;
class KgslAdrenoCmdbatchRetiredFtraceEvent;
struct KgslAdrenoCmdbatchRetiredFtraceEventDefaultTypeInternal;
extern KgslAdrenoCmdbatchRetiredFtraceEventDefaultTypeInternal _KgslAdrenoCmdbatchRetiredFtraceEvent_default_instance_;
class KgslAdrenoCmdbatchSubmittedFtraceEvent;
struct KgslAdrenoCmdbatchSubmittedFtraceEventDefaultTypeInternal;
extern KgslAdrenoCmdbatchSubmittedFtraceEventDefaultTypeInternal _KgslAdrenoCmdbatchSubmittedFtraceEvent_default_instance_;
class KgslAdrenoCmdbatchSyncFtraceEvent;
struct KgslAdrenoCmdbatchSyncFtraceEventDefaultTypeInternal;
extern KgslAdrenoCmdbatchSyncFtraceEventDefaultTypeInternal _KgslAdrenoCmdbatchSyncFtraceEvent_default_instance_;
class KgslGpuFrequencyFtraceEvent;
struct KgslGpuFrequencyFtraceEventDefaultTypeInternal;
extern KgslGpuFrequencyFtraceEventDefaultTypeInternal _KgslGpuFrequencyFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::KgslAdrenoCmdbatchQueuedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KgslAdrenoCmdbatchQueuedFtraceEvent>(Arena*);
template<> ::perfetto::protos::KgslAdrenoCmdbatchRetiredFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KgslAdrenoCmdbatchRetiredFtraceEvent>(Arena*);
template<> ::perfetto::protos::KgslAdrenoCmdbatchSubmittedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KgslAdrenoCmdbatchSubmittedFtraceEvent>(Arena*);
template<> ::perfetto::protos::KgslAdrenoCmdbatchSyncFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KgslAdrenoCmdbatchSyncFtraceEvent>(Arena*);
template<> ::perfetto::protos::KgslGpuFrequencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KgslGpuFrequencyFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class KgslGpuFrequencyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.KgslGpuFrequencyFtraceEvent) */ {
 public:
  inline KgslGpuFrequencyFtraceEvent() : KgslGpuFrequencyFtraceEvent(nullptr) {}
  ~KgslGpuFrequencyFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR KgslGpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KgslGpuFrequencyFtraceEvent(const KgslGpuFrequencyFtraceEvent& from);
  KgslGpuFrequencyFtraceEvent(KgslGpuFrequencyFtraceEvent&& from) noexcept
    : KgslGpuFrequencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KgslGpuFrequencyFtraceEvent& operator=(const KgslGpuFrequencyFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline KgslGpuFrequencyFtraceEvent& operator=(KgslGpuFrequencyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KgslGpuFrequencyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KgslGpuFrequencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KgslGpuFrequencyFtraceEvent*>(
               &_KgslGpuFrequencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KgslGpuFrequencyFtraceEvent& a, KgslGpuFrequencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KgslGpuFrequencyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KgslGpuFrequencyFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KgslGpuFrequencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KgslGpuFrequencyFtraceEvent>(arena);
  }
  KgslGpuFrequencyFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KgslGpuFrequencyFtraceEvent& from);
  void MergeFrom(const KgslGpuFrequencyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KgslGpuFrequencyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.KgslGpuFrequencyFtraceEvent";
  }
  protected:
  explicit KgslGpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuFreqFieldNumber = 1,
    kGpuIdFieldNumber = 2,
  };
  // optional uint32 gpu_freq = 1;
  bool has_gpu_freq() const;
  private:
  bool _internal_has_gpu_freq() const;
  public:
  void clear_gpu_freq();
  ::uint32_t gpu_freq() const;
  void set_gpu_freq(::uint32_t value);
  private:
  ::uint32_t _internal_gpu_freq() const;
  void _internal_set_gpu_freq(::uint32_t value);
  public:

  // optional uint32 gpu_id = 2;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::uint32_t gpu_id() const;
  void set_gpu_id(::uint32_t value);
  private:
  ::uint32_t _internal_gpu_id() const;
  void _internal_set_gpu_id(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.KgslGpuFrequencyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t gpu_freq_;
    ::uint32_t gpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto;
};
// -------------------------------------------------------------------

class KgslAdrenoCmdbatchQueuedFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent) */ {
 public:
  inline KgslAdrenoCmdbatchQueuedFtraceEvent() : KgslAdrenoCmdbatchQueuedFtraceEvent(nullptr) {}
  ~KgslAdrenoCmdbatchQueuedFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR KgslAdrenoCmdbatchQueuedFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KgslAdrenoCmdbatchQueuedFtraceEvent(const KgslAdrenoCmdbatchQueuedFtraceEvent& from);
  KgslAdrenoCmdbatchQueuedFtraceEvent(KgslAdrenoCmdbatchQueuedFtraceEvent&& from) noexcept
    : KgslAdrenoCmdbatchQueuedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KgslAdrenoCmdbatchQueuedFtraceEvent& operator=(const KgslAdrenoCmdbatchQueuedFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline KgslAdrenoCmdbatchQueuedFtraceEvent& operator=(KgslAdrenoCmdbatchQueuedFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KgslAdrenoCmdbatchQueuedFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KgslAdrenoCmdbatchQueuedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KgslAdrenoCmdbatchQueuedFtraceEvent*>(
               &_KgslAdrenoCmdbatchQueuedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KgslAdrenoCmdbatchQueuedFtraceEvent& a, KgslAdrenoCmdbatchQueuedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KgslAdrenoCmdbatchQueuedFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KgslAdrenoCmdbatchQueuedFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KgslAdrenoCmdbatchQueuedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KgslAdrenoCmdbatchQueuedFtraceEvent>(arena);
  }
  KgslAdrenoCmdbatchQueuedFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KgslAdrenoCmdbatchQueuedFtraceEvent& from);
  void MergeFrom(const KgslAdrenoCmdbatchQueuedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KgslAdrenoCmdbatchQueuedFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent";
  }
  protected:
  explicit KgslAdrenoCmdbatchQueuedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kQueuedFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kPrioFieldNumber = 5,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);
  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);
  public:

  // optional uint32 queued = 3;
  bool has_queued() const;
  private:
  bool _internal_has_queued() const;
  public:
  void clear_queued();
  ::uint32_t queued() const;
  void set_queued(::uint32_t value);
  private:
  ::uint32_t _internal_queued() const;
  void _internal_set_queued(::uint32_t value);
  public:

  // optional uint32 flags = 4;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);
  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);
  public:

  // optional uint32 prio = 5;
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::uint32_t prio() const;
  void set_prio(::uint32_t value);
  private:
  ::uint32_t _internal_prio() const;
  void _internal_set_prio(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t timestamp_;
    ::uint32_t queued_;
    ::uint32_t flags_;
    ::uint32_t prio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto;
};
// -------------------------------------------------------------------

class KgslAdrenoCmdbatchSubmittedFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent) */ {
 public:
  inline KgslAdrenoCmdbatchSubmittedFtraceEvent() : KgslAdrenoCmdbatchSubmittedFtraceEvent(nullptr) {}
  ~KgslAdrenoCmdbatchSubmittedFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR KgslAdrenoCmdbatchSubmittedFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KgslAdrenoCmdbatchSubmittedFtraceEvent(const KgslAdrenoCmdbatchSubmittedFtraceEvent& from);
  KgslAdrenoCmdbatchSubmittedFtraceEvent(KgslAdrenoCmdbatchSubmittedFtraceEvent&& from) noexcept
    : KgslAdrenoCmdbatchSubmittedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KgslAdrenoCmdbatchSubmittedFtraceEvent& operator=(const KgslAdrenoCmdbatchSubmittedFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline KgslAdrenoCmdbatchSubmittedFtraceEvent& operator=(KgslAdrenoCmdbatchSubmittedFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KgslAdrenoCmdbatchSubmittedFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KgslAdrenoCmdbatchSubmittedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KgslAdrenoCmdbatchSubmittedFtraceEvent*>(
               &_KgslAdrenoCmdbatchSubmittedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KgslAdrenoCmdbatchSubmittedFtraceEvent& a, KgslAdrenoCmdbatchSubmittedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KgslAdrenoCmdbatchSubmittedFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KgslAdrenoCmdbatchSubmittedFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KgslAdrenoCmdbatchSubmittedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KgslAdrenoCmdbatchSubmittedFtraceEvent>(arena);
  }
  KgslAdrenoCmdbatchSubmittedFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KgslAdrenoCmdbatchSubmittedFtraceEvent& from);
  void MergeFrom(const KgslAdrenoCmdbatchSubmittedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KgslAdrenoCmdbatchSubmittedFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent";
  }
  protected:
  explicit KgslAdrenoCmdbatchSubmittedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kInflightFieldNumber = 3,
    kTicksFieldNumber = 5,
    kSecsFieldNumber = 6,
    kFlagsFieldNumber = 4,
    kPrioFieldNumber = 8,
    kUsecsFieldNumber = 7,
    kRbIdFieldNumber = 9,
    kRptrFieldNumber = 10,
    kWptrFieldNumber = 11,
    kQInflightFieldNumber = 12,
    kDispatchQueueFieldNumber = 13,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);
  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);
  public:

  // optional int64 inflight = 3;
  bool has_inflight() const;
  private:
  bool _internal_has_inflight() const;
  public:
  void clear_inflight();
  ::int64_t inflight() const;
  void set_inflight(::int64_t value);
  private:
  ::int64_t _internal_inflight() const;
  void _internal_set_inflight(::int64_t value);
  public:

  // optional uint64 ticks = 5;
  bool has_ticks() const;
  private:
  bool _internal_has_ticks() const;
  public:
  void clear_ticks();
  ::uint64_t ticks() const;
  void set_ticks(::uint64_t value);
  private:
  ::uint64_t _internal_ticks() const;
  void _internal_set_ticks(::uint64_t value);
  public:

  // optional uint64 secs = 6;
  bool has_secs() const;
  private:
  bool _internal_has_secs() const;
  public:
  void clear_secs();
  ::uint64_t secs() const;
  void set_secs(::uint64_t value);
  private:
  ::uint64_t _internal_secs() const;
  void _internal_set_secs(::uint64_t value);
  public:

  // optional uint32 flags = 4;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);
  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);
  public:

  // optional int32 prio = 8;
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::int32_t prio() const;
  void set_prio(::int32_t value);
  private:
  ::int32_t _internal_prio() const;
  void _internal_set_prio(::int32_t value);
  public:

  // optional uint64 usecs = 7;
  bool has_usecs() const;
  private:
  bool _internal_has_usecs() const;
  public:
  void clear_usecs();
  ::uint64_t usecs() const;
  void set_usecs(::uint64_t value);
  private:
  ::uint64_t _internal_usecs() const;
  void _internal_set_usecs(::uint64_t value);
  public:

  // optional int32 rb_id = 9;
  bool has_rb_id() const;
  private:
  bool _internal_has_rb_id() const;
  public:
  void clear_rb_id();
  ::int32_t rb_id() const;
  void set_rb_id(::int32_t value);
  private:
  ::int32_t _internal_rb_id() const;
  void _internal_set_rb_id(::int32_t value);
  public:

  // optional uint32 rptr = 10;
  bool has_rptr() const;
  private:
  bool _internal_has_rptr() const;
  public:
  void clear_rptr();
  ::uint32_t rptr() const;
  void set_rptr(::uint32_t value);
  private:
  ::uint32_t _internal_rptr() const;
  void _internal_set_rptr(::uint32_t value);
  public:

  // optional uint32 wptr = 11;
  bool has_wptr() const;
  private:
  bool _internal_has_wptr() const;
  public:
  void clear_wptr();
  ::uint32_t wptr() const;
  void set_wptr(::uint32_t value);
  private:
  ::uint32_t _internal_wptr() const;
  void _internal_set_wptr(::uint32_t value);
  public:

  // optional int32 q_inflight = 12;
  bool has_q_inflight() const;
  private:
  bool _internal_has_q_inflight() const;
  public:
  void clear_q_inflight();
  ::int32_t q_inflight() const;
  void set_q_inflight(::int32_t value);
  private:
  ::int32_t _internal_q_inflight() const;
  void _internal_set_q_inflight(::int32_t value);
  public:

  // optional int32 dispatch_queue = 13;
  bool has_dispatch_queue() const;
  private:
  bool _internal_has_dispatch_queue() const;
  public:
  void clear_dispatch_queue();
  ::int32_t dispatch_queue() const;
  void set_dispatch_queue(::int32_t value);
  private:
  ::int32_t _internal_dispatch_queue() const;
  void _internal_set_dispatch_queue(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t timestamp_;
    ::int64_t inflight_;
    ::uint64_t ticks_;
    ::uint64_t secs_;
    ::uint32_t flags_;
    ::int32_t prio_;
    ::uint64_t usecs_;
    ::int32_t rb_id_;
    ::uint32_t rptr_;
    ::uint32_t wptr_;
    ::int32_t q_inflight_;
    ::int32_t dispatch_queue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto;
};
// -------------------------------------------------------------------

class KgslAdrenoCmdbatchSyncFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent) */ {
 public:
  inline KgslAdrenoCmdbatchSyncFtraceEvent() : KgslAdrenoCmdbatchSyncFtraceEvent(nullptr) {}
  ~KgslAdrenoCmdbatchSyncFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR KgslAdrenoCmdbatchSyncFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KgslAdrenoCmdbatchSyncFtraceEvent(const KgslAdrenoCmdbatchSyncFtraceEvent& from);
  KgslAdrenoCmdbatchSyncFtraceEvent(KgslAdrenoCmdbatchSyncFtraceEvent&& from) noexcept
    : KgslAdrenoCmdbatchSyncFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KgslAdrenoCmdbatchSyncFtraceEvent& operator=(const KgslAdrenoCmdbatchSyncFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline KgslAdrenoCmdbatchSyncFtraceEvent& operator=(KgslAdrenoCmdbatchSyncFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KgslAdrenoCmdbatchSyncFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KgslAdrenoCmdbatchSyncFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KgslAdrenoCmdbatchSyncFtraceEvent*>(
               &_KgslAdrenoCmdbatchSyncFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KgslAdrenoCmdbatchSyncFtraceEvent& a, KgslAdrenoCmdbatchSyncFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KgslAdrenoCmdbatchSyncFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KgslAdrenoCmdbatchSyncFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KgslAdrenoCmdbatchSyncFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KgslAdrenoCmdbatchSyncFtraceEvent>(arena);
  }
  KgslAdrenoCmdbatchSyncFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KgslAdrenoCmdbatchSyncFtraceEvent& from);
  void MergeFrom(const KgslAdrenoCmdbatchSyncFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KgslAdrenoCmdbatchSyncFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent";
  }
  protected:
  explicit KgslAdrenoCmdbatchSyncFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTicksFieldNumber = 3,
    kPrioFieldNumber = 4,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);
  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);
  public:

  // optional uint64 ticks = 3;
  bool has_ticks() const;
  private:
  bool _internal_has_ticks() const;
  public:
  void clear_ticks();
  ::uint64_t ticks() const;
  void set_ticks(::uint64_t value);
  private:
  ::uint64_t _internal_ticks() const;
  void _internal_set_ticks(::uint64_t value);
  public:

  // optional int32 prio = 4;
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::int32_t prio() const;
  void set_prio(::int32_t value);
  private:
  ::int32_t _internal_prio() const;
  void _internal_set_prio(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t timestamp_;
    ::uint64_t ticks_;
    ::int32_t prio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto;
};
// -------------------------------------------------------------------

class KgslAdrenoCmdbatchRetiredFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent) */ {
 public:
  inline KgslAdrenoCmdbatchRetiredFtraceEvent() : KgslAdrenoCmdbatchRetiredFtraceEvent(nullptr) {}
  ~KgslAdrenoCmdbatchRetiredFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR KgslAdrenoCmdbatchRetiredFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KgslAdrenoCmdbatchRetiredFtraceEvent(const KgslAdrenoCmdbatchRetiredFtraceEvent& from);
  KgslAdrenoCmdbatchRetiredFtraceEvent(KgslAdrenoCmdbatchRetiredFtraceEvent&& from) noexcept
    : KgslAdrenoCmdbatchRetiredFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KgslAdrenoCmdbatchRetiredFtraceEvent& operator=(const KgslAdrenoCmdbatchRetiredFtraceEvent& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline KgslAdrenoCmdbatchRetiredFtraceEvent& operator=(KgslAdrenoCmdbatchRetiredFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KgslAdrenoCmdbatchRetiredFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KgslAdrenoCmdbatchRetiredFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KgslAdrenoCmdbatchRetiredFtraceEvent*>(
               &_KgslAdrenoCmdbatchRetiredFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KgslAdrenoCmdbatchRetiredFtraceEvent& a, KgslAdrenoCmdbatchRetiredFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KgslAdrenoCmdbatchRetiredFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KgslAdrenoCmdbatchRetiredFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KgslAdrenoCmdbatchRetiredFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KgslAdrenoCmdbatchRetiredFtraceEvent>(arena);
  }
  KgslAdrenoCmdbatchRetiredFtraceEvent* New() const {
    return New(nullptr);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KgslAdrenoCmdbatchRetiredFtraceEvent& from);
  void MergeFrom(const KgslAdrenoCmdbatchRetiredFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KgslAdrenoCmdbatchRetiredFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent";
  }
  protected:
  explicit KgslAdrenoCmdbatchRetiredFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kInflightFieldNumber = 3,
    kRecoveryFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kStartFieldNumber = 6,
    kRetireFieldNumber = 7,
    kPrioFieldNumber = 8,
    kRbIdFieldNumber = 9,
    kRptrFieldNumber = 10,
    kWptrFieldNumber = 11,
    kFaultRecoveryFieldNumber = 13,
    kQInflightFieldNumber = 12,
    kDispatchQueueFieldNumber = 14,
    kSubmittedToRbFieldNumber = 15,
    kRetiredOnGmuFieldNumber = 16,
    kActiveFieldNumber = 17,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::uint32_t id() const;
  void set_id(::uint32_t value);
  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);
  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);
  public:

  // optional int64 inflight = 3;
  bool has_inflight() const;
  private:
  bool _internal_has_inflight() const;
  public:
  void clear_inflight();
  ::int64_t inflight() const;
  void set_inflight(::int64_t value);
  private:
  ::int64_t _internal_inflight() const;
  void _internal_set_inflight(::int64_t value);
  public:

  // optional uint32 recovery = 4;
  bool has_recovery() const;
  private:
  bool _internal_has_recovery() const;
  public:
  void clear_recovery();
  ::uint32_t recovery() const;
  void set_recovery(::uint32_t value);
  private:
  ::uint32_t _internal_recovery() const;
  void _internal_set_recovery(::uint32_t value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);
  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);
  public:

  // optional uint64 start = 6;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  ::uint64_t start() const;
  void set_start(::uint64_t value);
  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);
  public:

  // optional uint64 retire = 7;
  bool has_retire() const;
  private:
  bool _internal_has_retire() const;
  public:
  void clear_retire();
  ::uint64_t retire() const;
  void set_retire(::uint64_t value);
  private:
  ::uint64_t _internal_retire() const;
  void _internal_set_retire(::uint64_t value);
  public:

  // optional int32 prio = 8;
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::int32_t prio() const;
  void set_prio(::int32_t value);
  private:
  ::int32_t _internal_prio() const;
  void _internal_set_prio(::int32_t value);
  public:

  // optional int32 rb_id = 9;
  bool has_rb_id() const;
  private:
  bool _internal_has_rb_id() const;
  public:
  void clear_rb_id();
  ::int32_t rb_id() const;
  void set_rb_id(::int32_t value);
  private:
  ::int32_t _internal_rb_id() const;
  void _internal_set_rb_id(::int32_t value);
  public:

  // optional uint32 rptr = 10;
  bool has_rptr() const;
  private:
  bool _internal_has_rptr() const;
  public:
  void clear_rptr();
  ::uint32_t rptr() const;
  void set_rptr(::uint32_t value);
  private:
  ::uint32_t _internal_rptr() const;
  void _internal_set_rptr(::uint32_t value);
  public:

  // optional uint32 wptr = 11;
  bool has_wptr() const;
  private:
  bool _internal_has_wptr() const;
  public:
  void clear_wptr();
  ::uint32_t wptr() const;
  void set_wptr(::uint32_t value);
  private:
  ::uint32_t _internal_wptr() const;
  void _internal_set_wptr(::uint32_t value);
  public:

  // optional uint64 fault_recovery = 13;
  bool has_fault_recovery() const;
  private:
  bool _internal_has_fault_recovery() const;
  public:
  void clear_fault_recovery();
  ::uint64_t fault_recovery() const;
  void set_fault_recovery(::uint64_t value);
  private:
  ::uint64_t _internal_fault_recovery() const;
  void _internal_set_fault_recovery(::uint64_t value);
  public:

  // optional int32 q_inflight = 12;
  bool has_q_inflight() const;
  private:
  bool _internal_has_q_inflight() const;
  public:
  void clear_q_inflight();
  ::int32_t q_inflight() const;
  void set_q_inflight(::int32_t value);
  private:
  ::int32_t _internal_q_inflight() const;
  void _internal_set_q_inflight(::int32_t value);
  public:

  // optional uint32 dispatch_queue = 14;
  bool has_dispatch_queue() const;
  private:
  bool _internal_has_dispatch_queue() const;
  public:
  void clear_dispatch_queue();
  ::uint32_t dispatch_queue() const;
  void set_dispatch_queue(::uint32_t value);
  private:
  ::uint32_t _internal_dispatch_queue() const;
  void _internal_set_dispatch_queue(::uint32_t value);
  public:

  // optional uint64 submitted_to_rb = 15;
  bool has_submitted_to_rb() const;
  private:
  bool _internal_has_submitted_to_rb() const;
  public:
  void clear_submitted_to_rb();
  ::uint64_t submitted_to_rb() const;
  void set_submitted_to_rb(::uint64_t value);
  private:
  ::uint64_t _internal_submitted_to_rb() const;
  void _internal_set_submitted_to_rb(::uint64_t value);
  public:

  // optional uint64 retired_on_gmu = 16;
  bool has_retired_on_gmu() const;
  private:
  bool _internal_has_retired_on_gmu() const;
  public:
  void clear_retired_on_gmu();
  ::uint64_t retired_on_gmu() const;
  void set_retired_on_gmu(::uint64_t value);
  private:
  ::uint64_t _internal_retired_on_gmu() const;
  void _internal_set_retired_on_gmu(::uint64_t value);
  public:

  // optional uint64 active = 17;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  ::uint64_t active() const;
  void set_active(::uint64_t value);
  private:
  ::uint64_t _internal_active() const;
  void _internal_set_active(::uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t timestamp_;
    ::int64_t inflight_;
    ::uint32_t recovery_;
    ::uint32_t flags_;
    ::uint64_t start_;
    ::uint64_t retire_;
    ::int32_t prio_;
    ::int32_t rb_id_;
    ::uint32_t rptr_;
    ::uint32_t wptr_;
    ::uint64_t fault_recovery_;
    ::int32_t q_inflight_;
    ::uint32_t dispatch_queue_;
    ::uint64_t submitted_to_rb_;
    ::uint64_t retired_on_gmu_;
    ::uint64_t active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KgslGpuFrequencyFtraceEvent

// optional uint32 gpu_freq = 1;
inline bool KgslGpuFrequencyFtraceEvent::_internal_has_gpu_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KgslGpuFrequencyFtraceEvent::has_gpu_freq() const {
  return _internal_has_gpu_freq();
}
inline void KgslGpuFrequencyFtraceEvent::clear_gpu_freq() {
  _impl_.gpu_freq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KgslGpuFrequencyFtraceEvent::_internal_gpu_freq() const {
  return _impl_.gpu_freq_;
}
inline ::uint32_t KgslGpuFrequencyFtraceEvent::gpu_freq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslGpuFrequencyFtraceEvent.gpu_freq)
  return _internal_gpu_freq();
}
inline void KgslGpuFrequencyFtraceEvent::_internal_set_gpu_freq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gpu_freq_ = value;
}
inline void KgslGpuFrequencyFtraceEvent::set_gpu_freq(::uint32_t value) {
  _internal_set_gpu_freq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslGpuFrequencyFtraceEvent.gpu_freq)
}

// optional uint32 gpu_id = 2;
inline bool KgslGpuFrequencyFtraceEvent::_internal_has_gpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KgslGpuFrequencyFtraceEvent::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void KgslGpuFrequencyFtraceEvent::clear_gpu_id() {
  _impl_.gpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KgslGpuFrequencyFtraceEvent::_internal_gpu_id() const {
  return _impl_.gpu_id_;
}
inline ::uint32_t KgslGpuFrequencyFtraceEvent::gpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslGpuFrequencyFtraceEvent.gpu_id)
  return _internal_gpu_id();
}
inline void KgslGpuFrequencyFtraceEvent::_internal_set_gpu_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gpu_id_ = value;
}
inline void KgslGpuFrequencyFtraceEvent::set_gpu_id(::uint32_t value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslGpuFrequencyFtraceEvent.gpu_id)
}

// -------------------------------------------------------------------

// KgslAdrenoCmdbatchQueuedFtraceEvent

// optional uint32 id = 1;
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.id)
  return _internal_id();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_set_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.id)
}

// optional uint32 timestamp = 2;
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_set_timestamp(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.timestamp)
}

// optional uint32 queued = 3;
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_has_queued() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::has_queued() const {
  return _internal_has_queued();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::clear_queued() {
  _impl_.queued_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_queued() const {
  return _impl_.queued_;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::queued() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.queued)
  return _internal_queued();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_set_queued(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.queued_ = value;
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::set_queued(::uint32_t value) {
  _internal_set_queued(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.queued)
}

// optional uint32 flags = 4;
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::has_flags() const {
  return _internal_has_flags();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.flags)
  return _internal_flags();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.flags)
}

// optional uint32 prio = 5;
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_has_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchQueuedFtraceEvent::has_prio() const {
  return _internal_has_prio();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::clear_prio() {
  _impl_.prio_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_prio() const {
  return _impl_.prio_;
}
inline ::uint32_t KgslAdrenoCmdbatchQueuedFtraceEvent::prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.prio)
  return _internal_prio();
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::_internal_set_prio(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.prio_ = value;
}
inline void KgslAdrenoCmdbatchQueuedFtraceEvent::set_prio(::uint32_t value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchQueuedFtraceEvent.prio)
}

// -------------------------------------------------------------------

// KgslAdrenoCmdbatchSubmittedFtraceEvent

// optional uint32 id = 1;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.id)
  return _internal_id();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.id)
}

// optional uint32 timestamp = 2;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_timestamp(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.timestamp)
}

// optional int64 inflight = 3;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_inflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_inflight() const {
  return _internal_has_inflight();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_inflight() {
  _impl_.inflight_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_inflight() const {
  return _impl_.inflight_;
}
inline ::int64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::inflight() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.inflight)
  return _internal_inflight();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_inflight(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.inflight_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_inflight(::int64_t value) {
  _internal_set_inflight(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.inflight)
}

// optional uint32 flags = 4;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_flags() const {
  return _internal_has_flags();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.flags)
  return _internal_flags();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.flags_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.flags)
}

// optional uint64 ticks = 5;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_ticks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_ticks() const {
  return _internal_has_ticks();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_ticks() {
  _impl_.ticks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_ticks() const {
  return _impl_.ticks_;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::ticks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.ticks)
  return _internal_ticks();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_ticks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ticks_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_ticks(::uint64_t value) {
  _internal_set_ticks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.ticks)
}

// optional uint64 secs = 6;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_secs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_secs() const {
  return _internal_has_secs();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_secs() {
  _impl_.secs_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_secs() const {
  return _impl_.secs_;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::secs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.secs)
  return _internal_secs();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_secs(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.secs_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_secs(::uint64_t value) {
  _internal_set_secs(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.secs)
}

// optional uint64 usecs = 7;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_usecs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_usecs() const {
  return _internal_has_usecs();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_usecs() {
  _impl_.usecs_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_usecs() const {
  return _impl_.usecs_;
}
inline ::uint64_t KgslAdrenoCmdbatchSubmittedFtraceEvent::usecs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.usecs)
  return _internal_usecs();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_usecs(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.usecs_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_usecs(::uint64_t value) {
  _internal_set_usecs(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.usecs)
}

// optional int32 prio = 8;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_prio() const {
  return _internal_has_prio();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_prio() {
  _impl_.prio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_prio() const {
  return _impl_.prio_;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.prio)
  return _internal_prio();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_prio(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.prio_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_prio(::int32_t value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.prio)
}

// optional int32 rb_id = 9;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_rb_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_rb_id() const {
  return _internal_has_rb_id();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_rb_id() {
  _impl_.rb_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_rb_id() const {
  return _impl_.rb_id_;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::rb_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.rb_id)
  return _internal_rb_id();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_rb_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.rb_id_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_rb_id(::int32_t value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.rb_id)
}

// optional uint32 rptr = 10;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_rptr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_rptr() const {
  return _internal_has_rptr();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_rptr() {
  _impl_.rptr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_rptr() const {
  return _impl_.rptr_;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::rptr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.rptr)
  return _internal_rptr();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_rptr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rptr_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_rptr(::uint32_t value) {
  _internal_set_rptr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.rptr)
}

// optional uint32 wptr = 11;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_wptr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_wptr() const {
  return _internal_has_wptr();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_wptr() {
  _impl_.wptr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_wptr() const {
  return _impl_.wptr_;
}
inline ::uint32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::wptr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.wptr)
  return _internal_wptr();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_wptr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.wptr_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_wptr(::uint32_t value) {
  _internal_set_wptr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.wptr)
}

// optional int32 q_inflight = 12;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_q_inflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_q_inflight() const {
  return _internal_has_q_inflight();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_q_inflight() {
  _impl_.q_inflight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_q_inflight() const {
  return _impl_.q_inflight_;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::q_inflight() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.q_inflight)
  return _internal_q_inflight();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_q_inflight(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.q_inflight_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_q_inflight(::int32_t value) {
  _internal_set_q_inflight(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.q_inflight)
}

// optional int32 dispatch_queue = 13;
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_has_dispatch_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSubmittedFtraceEvent::has_dispatch_queue() const {
  return _internal_has_dispatch_queue();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::clear_dispatch_queue() {
  _impl_.dispatch_queue_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_dispatch_queue() const {
  return _impl_.dispatch_queue_;
}
inline ::int32_t KgslAdrenoCmdbatchSubmittedFtraceEvent::dispatch_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.dispatch_queue)
  return _internal_dispatch_queue();
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::_internal_set_dispatch_queue(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.dispatch_queue_ = value;
}
inline void KgslAdrenoCmdbatchSubmittedFtraceEvent::set_dispatch_queue(::int32_t value) {
  _internal_set_dispatch_queue(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSubmittedFtraceEvent.dispatch_queue)
}

// -------------------------------------------------------------------

// KgslAdrenoCmdbatchSyncFtraceEvent

// optional uint32 id = 1;
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KgslAdrenoCmdbatchSyncFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t KgslAdrenoCmdbatchSyncFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.id)
  return _internal_id();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::_internal_set_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.id)
}

// optional uint32 timestamp = 2;
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KgslAdrenoCmdbatchSyncFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline ::uint32_t KgslAdrenoCmdbatchSyncFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::_internal_set_timestamp(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.timestamp)
}

// optional uint64 ticks = 3;
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::_internal_has_ticks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::has_ticks() const {
  return _internal_has_ticks();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::clear_ticks() {
  _impl_.ticks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KgslAdrenoCmdbatchSyncFtraceEvent::_internal_ticks() const {
  return _impl_.ticks_;
}
inline ::uint64_t KgslAdrenoCmdbatchSyncFtraceEvent::ticks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.ticks)
  return _internal_ticks();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::_internal_set_ticks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ticks_ = value;
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::set_ticks(::uint64_t value) {
  _internal_set_ticks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.ticks)
}

// optional int32 prio = 4;
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::_internal_has_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchSyncFtraceEvent::has_prio() const {
  return _internal_has_prio();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::clear_prio() {
  _impl_.prio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t KgslAdrenoCmdbatchSyncFtraceEvent::_internal_prio() const {
  return _impl_.prio_;
}
inline ::int32_t KgslAdrenoCmdbatchSyncFtraceEvent::prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.prio)
  return _internal_prio();
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::_internal_set_prio(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.prio_ = value;
}
inline void KgslAdrenoCmdbatchSyncFtraceEvent::set_prio(::int32_t value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchSyncFtraceEvent.prio)
}

// -------------------------------------------------------------------

// KgslAdrenoCmdbatchRetiredFtraceEvent

// optional uint32 id = 1;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.id)
  return _internal_id();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.id)
}

// optional uint32 timestamp = 2;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_timestamp(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.timestamp)
}

// optional int64 inflight = 3;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_inflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_inflight() const {
  return _internal_has_inflight();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_inflight() {
  _impl_.inflight_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_inflight() const {
  return _impl_.inflight_;
}
inline ::int64_t KgslAdrenoCmdbatchRetiredFtraceEvent::inflight() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.inflight)
  return _internal_inflight();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_inflight(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.inflight_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_inflight(::int64_t value) {
  _internal_set_inflight(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.inflight)
}

// optional uint32 recovery = 4;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_recovery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_recovery() const {
  return _internal_has_recovery();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_recovery() {
  _impl_.recovery_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_recovery() const {
  return _impl_.recovery_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::recovery() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.recovery)
  return _internal_recovery();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_recovery(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.recovery_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_recovery(::uint32_t value) {
  _internal_set_recovery(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.recovery)
}

// optional uint32 flags = 5;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_flags() const {
  return _internal_has_flags();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.flags)
  return _internal_flags();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.flags)
}

// optional uint64 start = 6;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_start() const {
  return _internal_has_start();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.start)
  return _internal_start();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_start(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.start_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.start)
}

// optional uint64 retire = 7;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_retire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_retire() const {
  return _internal_has_retire();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_retire() {
  _impl_.retire_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_retire() const {
  return _impl_.retire_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::retire() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.retire)
  return _internal_retire();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_retire(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.retire_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_retire(::uint64_t value) {
  _internal_set_retire(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.retire)
}

// optional int32 prio = 8;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_prio() const {
  return _internal_has_prio();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_prio() {
  _impl_.prio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_prio() const {
  return _impl_.prio_;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.prio)
  return _internal_prio();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_prio(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.prio_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_prio(::int32_t value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.prio)
}

// optional int32 rb_id = 9;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_rb_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_rb_id() const {
  return _internal_has_rb_id();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_rb_id() {
  _impl_.rb_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_rb_id() const {
  return _impl_.rb_id_;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::rb_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.rb_id)
  return _internal_rb_id();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_rb_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.rb_id_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_rb_id(::int32_t value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.rb_id)
}

// optional uint32 rptr = 10;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_rptr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_rptr() const {
  return _internal_has_rptr();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_rptr() {
  _impl_.rptr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_rptr() const {
  return _impl_.rptr_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::rptr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.rptr)
  return _internal_rptr();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_rptr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rptr_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_rptr(::uint32_t value) {
  _internal_set_rptr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.rptr)
}

// optional uint32 wptr = 11;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_wptr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_wptr() const {
  return _internal_has_wptr();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_wptr() {
  _impl_.wptr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_wptr() const {
  return _impl_.wptr_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::wptr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.wptr)
  return _internal_wptr();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_wptr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.wptr_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_wptr(::uint32_t value) {
  _internal_set_wptr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.wptr)
}

// optional int32 q_inflight = 12;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_q_inflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_q_inflight() const {
  return _internal_has_q_inflight();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_q_inflight() {
  _impl_.q_inflight_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_q_inflight() const {
  return _impl_.q_inflight_;
}
inline ::int32_t KgslAdrenoCmdbatchRetiredFtraceEvent::q_inflight() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.q_inflight)
  return _internal_q_inflight();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_q_inflight(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.q_inflight_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_q_inflight(::int32_t value) {
  _internal_set_q_inflight(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.q_inflight)
}

// optional uint64 fault_recovery = 13;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_fault_recovery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_fault_recovery() const {
  return _internal_has_fault_recovery();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_fault_recovery() {
  _impl_.fault_recovery_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_fault_recovery() const {
  return _impl_.fault_recovery_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::fault_recovery() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.fault_recovery)
  return _internal_fault_recovery();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_fault_recovery(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.fault_recovery_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_fault_recovery(::uint64_t value) {
  _internal_set_fault_recovery(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.fault_recovery)
}

// optional uint32 dispatch_queue = 14;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_dispatch_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_dispatch_queue() const {
  return _internal_has_dispatch_queue();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_dispatch_queue() {
  _impl_.dispatch_queue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_dispatch_queue() const {
  return _impl_.dispatch_queue_;
}
inline ::uint32_t KgslAdrenoCmdbatchRetiredFtraceEvent::dispatch_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.dispatch_queue)
  return _internal_dispatch_queue();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_dispatch_queue(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.dispatch_queue_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_dispatch_queue(::uint32_t value) {
  _internal_set_dispatch_queue(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.dispatch_queue)
}

// optional uint64 submitted_to_rb = 15;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_submitted_to_rb() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_submitted_to_rb() const {
  return _internal_has_submitted_to_rb();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_submitted_to_rb() {
  _impl_.submitted_to_rb_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_submitted_to_rb() const {
  return _impl_.submitted_to_rb_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::submitted_to_rb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.submitted_to_rb)
  return _internal_submitted_to_rb();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_submitted_to_rb(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.submitted_to_rb_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_submitted_to_rb(::uint64_t value) {
  _internal_set_submitted_to_rb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.submitted_to_rb)
}

// optional uint64 retired_on_gmu = 16;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_retired_on_gmu() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_retired_on_gmu() const {
  return _internal_has_retired_on_gmu();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_retired_on_gmu() {
  _impl_.retired_on_gmu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_retired_on_gmu() const {
  return _impl_.retired_on_gmu_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::retired_on_gmu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.retired_on_gmu)
  return _internal_retired_on_gmu();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_retired_on_gmu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.retired_on_gmu_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_retired_on_gmu(::uint64_t value) {
  _internal_set_retired_on_gmu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.retired_on_gmu)
}

// optional uint64 active = 17;
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KgslAdrenoCmdbatchRetiredFtraceEvent::has_active() const {
  return _internal_has_active();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::clear_active() {
  _impl_.active_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_active() const {
  return _impl_.active_;
}
inline ::uint64_t KgslAdrenoCmdbatchRetiredFtraceEvent::active() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.active)
  return _internal_active();
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::_internal_set_active(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.active_ = value;
}
inline void KgslAdrenoCmdbatchRetiredFtraceEvent::set_active(::uint64_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KgslAdrenoCmdbatchRetiredFtraceEvent.active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkgsl_2eproto
